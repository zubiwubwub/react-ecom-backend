/// <reference types="mongoose" />
import { KeystoneConfig } from '@keystone-next/types';
export declare function initConfig(config: KeystoneConfig): {
    lists: Record<string, import("@keystone-next/types").ListConfig<import("@keystone-next/types").BaseGeneratedListTypes, any>>;
    db: (import("@keystone-next/types").DatabaseCommon & {
        adapter: "mongoose";
        mongooseOptions?: ({
            mongoUri?: string | undefined;
        } & import("mongoose").ConnectOptions) | undefined;
    }) | (import("@keystone-next/types").DatabaseCommon & {
        adapter: "knex";
        dropDatabase?: boolean | undefined;
        knexOptions?: ({
            client?: string | undefined;
            connection?: string | undefined;
        } & import("knex").Config<any>) | undefined;
        schemaName?: string | undefined;
    }) | (import("@keystone-next/types").DatabaseCommon & {
        adapter: "prisma_postgresql";
        dropDatabase?: boolean | undefined;
        provider?: string | undefined;
        getPrismaPath?: ((arg: {
            prismaSchema: any;
        }) => string) | undefined;
        getDbSchemaName?: ((arg: {
            prismaSchema: any;
        }) => string) | undefined;
        enableLogging?: boolean | undefined;
    });
    graphql?: {
        path?: string | undefined;
        queryLimits?: {
            maxTotalResults?: number | undefined;
        } | undefined;
    } | undefined;
    session?: (() => import("@keystone-next/types").SessionStrategy<any, never>) | undefined;
    ui?: import("@keystone-next/types").KeystoneAdminUIConfig | undefined;
    server?: {
        cors?: any;
    } | undefined;
    extendGraphqlSchema?: import("@keystone-next/types").ExtendGraphqlSchema | undefined;
};
