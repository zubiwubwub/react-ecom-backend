'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/objectWithoutProperties');
var core = require('@keystone-ui/core');
var router = require('next/router');
require('next/link');
var React = require('react');
var router_dist_adminUi = require('../../../router/dist/admin-ui.cjs.prod.js');
require('@keystone-ui/button');
var client = require('@apollo/client');
require('@keystone-ui/toast');
var loading = require('@keystone-ui/loading');
var modals = require('@keystone-ui/modals');
require('../../../dist/objectSpread2-4dba075b.cjs.prod.js');
require('@emotion/hash');
require('@keystone-next/types');
require('../../../dist/admin-meta-graphql-5b37ade6.cjs.prod.js');
var context_dist_adminUi = require('../../../context/dist/admin-ui.cjs.prod.js');
require('apollo-upload-client');
var adminUiUtils = require('@keystone-next/admin-ui-utils');
var GraphQLErrorNotice = require('../../../dist/GraphQLErrorNotice-f8b7eb3d.cjs.prod.js');
require('@keystone-ui/popover');
require('@keystone-ui/icons/icons/MoreHorizontalIcon');
require('@keystone-ui/icons/icons/ChevronRightIcon');
require('../../../dist/SignoutButton-7d887a6b.cjs.prod.js');
require('fast-deep-equal');
require('@keystone-ui/notice');
var CreateItemDrawer = require('../../../dist/CreateItemDrawer-635615af.cjs.prod.js');
var PlusIcon = require('@keystone-ui/icons/icons/PlusIcon');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);

const ListCard = ({
  listKey,
  count
}) => {
  const {
    colors,
    palette,
    radii,
    spacing
  } = core.useTheme();
  const list = context_dist_adminUi.useList(listKey);
  const [isCreateModalOpen, setIsCreateModalOpen] = React.useState(false);
  const router$1 = router.useRouter();
  return core.jsx("div", {
    css: {
      position: 'relative'
    }
  }, core.jsx(router_dist_adminUi.Link, {
    href: list.path,
    css: {
      backgroundColor: colors.background,
      borderColor: colors.border,
      borderRadius: radii.medium,
      borderWidth: 1,
      // boxShadow: shadow.s100,
      display: 'inline-block',
      minWidth: 280,
      padding: spacing.large,
      textDecoration: 'none',
      ':hover': {
        borderColor: palette.blue400
      },
      ':hover h3': {
        textDecoration: 'underline'
      }
    }
  }, core.jsx("h3", {
    css: {
      margin: `0 0 ${spacing.small}px 0`
    }
  }, list.label, " "), count.type === 'success' ? core.jsx("span", {
    css: {
      color: colors.foreground,
      textDecoration: 'none'
    }
  }, count.count, " item", count.count !== 1 ? 's' : '') : count.type === 'error' ? count.message : count.type === 'loading' ? core.jsx(loading.LoadingDots, {
    label: `Loading count of ${list.plural}`,
    size: "small",
    tone: "passive"
  }) : 'No access'), core.jsx(CreateButton, {
    disabled: isCreateModalOpen,
    onClick: () => {
      setIsCreateModalOpen(true);
    }
  }, core.jsx(PlusIcon.PlusIcon, {
    size: "large"
  }), core.jsx(core.VisuallyHidden, null, "Create ", list.singular)), core.jsx(modals.DrawerController, {
    isOpen: isCreateModalOpen
  }, core.jsx(CreateItemDrawer.CreateItemDrawer, {
    listKey: list.key,
    onCreate: ({
      id
    }) => {
      router$1.push(`/${list.path}/${id}`);
    },
    onClose: () => {
      setIsCreateModalOpen(false);
    }
  })));
};

const CreateButton = props => {
  const theme = core.useTheme();
  return core.jsx("button", _extends__default['default']({
    css: {
      alignItems: 'center',
      backgroundColor: theme.palette.neutral400,
      border: 0,
      borderRadius: theme.radii.xsmall,
      color: 'white',
      cursor: 'pointer',
      display: 'flex',
      height: 32,
      justifyContent: 'center',
      outline: 0,
      position: 'absolute',
      right: theme.spacing.large,
      top: theme.spacing.large,
      transition: 'background-color 80ms linear',
      width: 32,
      '&:hover, &:focus': {
        backgroundColor: theme.tones.positive.fill[0]
      }
    }
  }, props));
};

const HomePage = ({
  query
}) => {
  const {
    adminMeta: {
      lists
    },
    visibleLists
  } = context_dist_adminUi.useKeystone();
  let {
    data,
    error
  } = client.useQuery(query, {
    errorPolicy: 'all'
  });
  const dataGetter = adminUiUtils.makeDataGetter(data, error === null || error === void 0 ? void 0 : error.graphQLErrors);
  return core.jsx(GraphQLErrorNotice.PageContainer, {
    header: core.jsx(core.Heading, {
      type: "h3"
    }, "Dashboard")
  }, visibleLists.state === 'loading' ? core.jsx(core.Center, {
    css: {
      height: `calc(100vh - ${GraphQLErrorNotice.HEADER_HEIGHT}px)`
    }
  }, core.jsx(loading.LoadingDots, {
    label: "Loading lists",
    size: "large",
    tone: "passive"
  })) : core.jsx(core.Inline, {
    gap: "large",
    paddingY: "xlarge"
  }, (() => {
    if (visibleLists.state === 'error') {
      return core.jsx("span", {
        css: {
          color: 'red'
        }
      }, visibleLists.error instanceof Error ? visibleLists.error.message : visibleLists.error[0].message);
    }

    return Object.keys(lists).map(key => {
      var _result$errors;

      if (!visibleLists.lists.has(key)) {
        return null;
      }

      const result = dataGetter.get(key); // TODO: Checking based on the message is bad, but we need to revisit GraphQL errors in
      // Keystone to fix it and that's a whole other can of worms...

      if (((_result$errors = result.errors) === null || _result$errors === void 0 ? void 0 : _result$errors[0].message) === 'You do not have access to this resource') {
        return core.jsx(ListCard, {
          count: {
            type: 'no-access'
          },
          key: key,
          listKey: key
        });
      }

      return core.jsx(ListCard, {
        count: data ? result.errors ? {
          type: 'error',
          message: result.errors[0].message
        } : {
          type: 'success',
          count: data[key].count
        } : {
          type: 'loading'
        },
        key: key,
        listKey: key
      });
    });
  })()));
};

exports.HomePage = HomePage;
