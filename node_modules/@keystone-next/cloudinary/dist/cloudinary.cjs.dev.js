'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectWithoutProperties = require('@babel/runtime/helpers/objectWithoutProperties');
var path = require('path');
var fieldsCloudinaryImage = require('@keystonejs/fields-cloudinary-image');
var fileAdapters = require('@keystonejs/file-adapters');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _objectWithoutProperties__default = /*#__PURE__*/_interopDefault(_objectWithoutProperties);
var path__default = /*#__PURE__*/_interopDefault(path);

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

const cloudinaryImage = (_ref) => {
  let {
    cloudinary
  } = _ref,
      config = _objectWithoutProperties__default['default'](_ref, ["cloudinary"]);

  return {
    type: fieldsCloudinaryImage.CloudinaryImage,
    config: _objectSpread2(_objectSpread2({}, config), {}, {
      // @ts-ignore
      adapter: new fileAdapters.CloudinaryAdapter(cloudinary)
    }),
    views: path__default['default'].join(path__default['default'].dirname(require.resolve('@keystone-next/cloudinary/package.json')), 'views')
  };
};

exports.cloudinaryImage = cloudinaryImage;
